
Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ff6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000106a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  0000106a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000106a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012df  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090c  00000000  00000000  000024af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ad  00000000  00000000  00002dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00003768  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000538  00000000  00000000  000039c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac5  00000000  00000000  00003ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000049bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 04 	jmp	0x870	; 0x870 <__ctors_end>
   4:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
   8:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
   c:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  10:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  14:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  18:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  1c:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  20:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  24:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  28:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  2c:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  30:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  34:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  38:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__vector_14>
  3c:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  40:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  44:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  48:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  4c:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
  50:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>

00000054 <Stop>:
  54:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
  64:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
  74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
  84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
  94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
  a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
  b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
  c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
  d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
  e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
  f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
 104:	3f 9f cf 67 33 19 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ?..g3...........
 114:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 19 33 67 cf 9f 3f     ...........3g..?
 124:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 134:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 144:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 154:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 164:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 174:	ff ff ff ff ff ff ff ff 3f 1f cf e7 33 19 0c 06     ........?...3...
 184:	03 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
 1a0:	00 00 01 03 06 0c 19 33 e7 cf 1f 3f ff ff ff ff     .......3...?....
 1b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 1c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 1d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 1e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 1f0:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 ff ff     ................
 200:	00 00 00 00 f0 d8 98 98 98 30 00 18 18 18 f8 f8     .........0......
 210:	18 18 18 80 e0 70 18 18 18 30 f0 e0 00 00 f8 18     .....p...0......
 220:	18 18 b0 f0 00 00 00 00 ff ff 00 00 ff ff ff ff     ................
 230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 270:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 ff ff     ................
 280:	00 00 00 00 0c 08 19 19 09 0f 06 00 00 00 0f 0f     ................
 290:	00 00 00 01 07 0e 08 18 18 0c 0f 07 00 00 0f 01     ................
 2a0:	01 01 01 01 00 00 00 00 ff ff 00 00 ff ff ff ff     ................
 2b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 2c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 2d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 2e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 2f0:	ff ff ff ff ff ff ff ff ff ff ff ff fc f8 f3 e7     ................
 300:	cc 98 30 60 c0 80 00 00 00 00 00 00 00 00 00 00     ..0`............
	...
 320:	00 00 80 c0 60 30 98 cc e7 f3 f8 fc ff ff ff ff     ....`0..........
 330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 380:	ff ff ff fe fc f9 f3 e6 cc 98 30 30 30 30 30 30     ..........000000
 390:	30 30 30 30 30 30 30 30 30 30 30 30 30 30 98 cc     00000000000000..
 3a0:	e6 f3 f9 fc fe ff ff ff ff ff ff ff ff ff ff ff     ................
 3b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 3c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 3d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 3e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 3f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 450:	ff ff ff ff                                         ....

00000454 <Go>:
 454:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 464:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 00 00     ................
	...
 4b8:	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 4c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 4d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 4e8:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
 538:	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 548:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 558:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 568:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
 584:	00 00 80 c0 e0 e0 f0 f0 f0 f8 f8 f8 f8 f8 f0 f0     ................
 594:	f0 e0 c0 80 00 00 00 00 80 c0 e0 e0 f0 f0 f0 f0     ................
 5a4:	f0 f8 f8 f0 f0 f0 f0 e0 c0 c0 00 00 00 00 00 00     ................
 5b4:	00 00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff     ................
 5c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 5d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 5e4:	ff ff ff ff ff ff ff ff ff ff ff ff 00 10 10 10     ................
 5f4:	10 10 12 12 12 92 92 92 92 92 92 92 02 02 e0 f8     ................
 604:	fe ff ff ff 7f 0f 07 03 03 c1 e1 e1 e1 e3 e7 e7     ................
 614:	e7 e7 e3 e3 e3 f8 fe ff ff ff 7f 0f 07 03 03 01     ................
 624:	01 01 01 03 03 07 ff ff ff ff ff fe f0 00 00 00     ................
 634:	00 00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff     ................
 644:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 654:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 664:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 00 00     ................
	...
 680:	00 00 0f 3f 7f ff ff ff fe f8 f0 e0 e3 e3 e3 e3     ...?............
 690:	f3 fb ff ff ff 7f 3f 1f 0f 3f 7f ff ff ff fe f8     ......?..?......
 6a0:	f0 e0 e0 e0 e0 e0 f0 f0 f8 fe ff ff 7f 3f 1f 07     .............?..
	...
 6b8:	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 6c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 6d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 6e8:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
 704:	00 00 01 03 03 07 07 07 07 07 07 07 03 03 03 01     ................
	...
 71c:	01 03 03 07 07 07 07 07 07 07 03 03 03 01 01 00     ................
	...
 738:	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 748:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 758:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 768:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
 7b8:	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 7c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 7d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 7e8:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
 838:	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
 848:	ff ff ff ff ff ff ff ff ff ff ff ff                 ............

00000854 <ssd1306_init_sequence>:
 854:	ae 20 00 b0 c8 00 10 40 81 3f a1 a6 a8 3f a4 d3     . .....@.?...?..
 864:	00 d5 f0 d9 22 da 12 db 20 8d 14 af                 ...."... ...

00000870 <__ctors_end>:
 870:	11 24       	eor	r1, r1
 872:	1f be       	out	0x3f, r1	; 63
 874:	cf e5       	ldi	r28, 0x5F	; 95
 876:	d4 e0       	ldi	r29, 0x04	; 4
 878:	de bf       	out	0x3e, r29	; 62
 87a:	cd bf       	out	0x3d, r28	; 61

0000087c <__do_clear_bss>:
 87c:	20 e0       	ldi	r18, 0x00	; 0
 87e:	a0 e6       	ldi	r26, 0x60	; 96
 880:	b0 e0       	ldi	r27, 0x00	; 0
 882:	01 c0       	rjmp	.+2      	; 0x886 <.do_clear_bss_start>

00000884 <.do_clear_bss_loop>:
 884:	1d 92       	st	X+, r1

00000886 <.do_clear_bss_start>:
 886:	a8 36       	cpi	r26, 0x68	; 104
 888:	b2 07       	cpc	r27, r18
 88a:	e1 f7       	brne	.-8      	; 0x884 <.do_clear_bss_loop>
 88c:	0e 94 bf 04 	call	0x97e	; 0x97e <main>
 890:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <_exit>

00000894 <__bad_interrupt>:
 894:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000898 <UART_init>:
void UART_TxChar(char ch);
void UART_SendString(char *str);

void UART_init(long USART_BAUDRATE)
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);/* Turn on transmission and reception */
 898:	2a b1       	in	r18, 0x0a	; 10
 89a:	28 61       	ori	r18, 0x18	; 24
 89c:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);/* Use 8-bit character sizes */
 89e:	20 b5       	in	r18, 0x20	; 32
 8a0:	26 68       	ori	r18, 0x86	; 134
 8a2:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
 8a4:	dc 01       	movw	r26, r24
 8a6:	cb 01       	movw	r24, r22
 8a8:	88 0f       	add	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	aa 1f       	adc	r26, r26
 8ae:	bb 1f       	adc	r27, r27
 8b0:	88 0f       	add	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	aa 1f       	adc	r26, r26
 8b6:	bb 1f       	adc	r27, r27
 8b8:	9c 01       	movw	r18, r24
 8ba:	ad 01       	movw	r20, r26
 8bc:	22 0f       	add	r18, r18
 8be:	33 1f       	adc	r19, r19
 8c0:	44 1f       	adc	r20, r20
 8c2:	55 1f       	adc	r21, r21
 8c4:	22 0f       	add	r18, r18
 8c6:	33 1f       	adc	r19, r19
 8c8:	44 1f       	adc	r20, r20
 8ca:	55 1f       	adc	r21, r21
 8cc:	60 e0       	ldi	r22, 0x00	; 0
 8ce:	72 e1       	ldi	r23, 0x12	; 18
 8d0:	8a e7       	ldi	r24, 0x7A	; 122
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 d7 07 	call	0xfae	; 0xfae <__udivmodsi4>
 8d8:	8f ef       	ldi	r24, 0xFF	; 255
 8da:	82 0f       	add	r24, r18
 8dc:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
 8de:	da 01       	movw	r26, r20
 8e0:	c9 01       	movw	r24, r18
 8e2:	01 97       	sbiw	r24, 0x01	; 1
 8e4:	a1 09       	sbc	r26, r1
 8e6:	b1 09       	sbc	r27, r1
 8e8:	89 2f       	mov	r24, r25
 8ea:	9a 2f       	mov	r25, r26
 8ec:	ab 2f       	mov	r26, r27
 8ee:	bb 27       	eor	r27, r27
 8f0:	80 bd       	out	0x20, r24	; 32
 8f2:	08 95       	ret

000008f4 <__vector_14>:
int sensor1;
int sensor2;
int sensor3;

ISR (ADC_vect)
{
 8f4:	1f 92       	push	r1
 8f6:	0f 92       	push	r0
 8f8:	0f b6       	in	r0, 0x3f	; 63
 8fa:	0f 92       	push	r0
 8fc:	11 24       	eor	r1, r1
 8fe:	8f 93       	push	r24
 900:	9f 93       	push	r25
	if(v== 0)
 902:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 906:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 90a:	00 97       	sbiw	r24, 0x00	; 0
 90c:	79 f4       	brne	.+30     	; 0x92c <__vector_14+0x38>
	{
		sensor1=ADC;
 90e:	84 b1       	in	r24, 0x04	; 4
 910:	95 b1       	in	r25, 0x05	; 5
 912:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <sensor1+0x1>
 916:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <sensor1>
		ADMUX=0b00000001;
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	87 b9       	out	0x07, r24	; 7
		v=1;
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 926:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 92a:	1f c0       	rjmp	.+62     	; 0x96a <__vector_14+0x76>
	}
	else if(v==1)
 92c:	81 30       	cpi	r24, 0x01	; 1
 92e:	91 05       	cpc	r25, r1
 930:	79 f4       	brne	.+30     	; 0x950 <__vector_14+0x5c>
	{
		sensor2=ADC;
 932:	84 b1       	in	r24, 0x04	; 4
 934:	95 b1       	in	r25, 0x05	; 5
 936:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <sensor2+0x1>
 93a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <sensor2>
		ADMUX=0b00000010;
 93e:	82 e0       	ldi	r24, 0x02	; 2
 940:	87 b9       	out	0x07, r24	; 7
		v=2;
 942:	82 e0       	ldi	r24, 0x02	; 2
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 94a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 94e:	0d c0       	rjmp	.+26     	; 0x96a <__vector_14+0x76>
	}
	else if(v==2)
 950:	02 97       	sbiw	r24, 0x02	; 2
 952:	59 f4       	brne	.+22     	; 0x96a <__vector_14+0x76>
	{
		sensor3=ADC;
 954:	84 b1       	in	r24, 0x04	; 4
 956:	95 b1       	in	r25, 0x05	; 5
 958:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <sensor3+0x1>
 95c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <sensor3>
		ADMUX=0b00000000;
 960:	17 b8       	out	0x07, r1	; 7
		v=0;
 962:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 966:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	ADCSRA |= (1<<ADSC);
 96a:	86 b1       	in	r24, 0x06	; 6
 96c:	80 64       	ori	r24, 0x40	; 64
 96e:	86 b9       	out	0x06, r24	; 6
}
 970:	9f 91       	pop	r25
 972:	8f 91       	pop	r24
 974:	0f 90       	pop	r0
 976:	0f be       	out	0x3f, r0	; 63
 978:	0f 90       	pop	r0
 97a:	1f 90       	pop	r1
 97c:	18 95       	reti

0000097e <main>:

int main(void)
{
	UART_init(9600);
 97e:	60 e8       	ldi	r22, 0x80	; 128
 980:	75 e2       	ldi	r23, 0x25	; 37
 982:	80 e0       	ldi	r24, 0x00	; 0
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	0e 94 4c 04 	call	0x898	; 0x898 <UART_init>
	//reconfigurations ADC
	ADMUX=0b00000000;
 98a:	17 b8       	out	0x07, r1	; 7
	ADCSRA |=(1<<ADIE) | (1<<ADEN); //ADC e interruptions
 98c:	86 b1       	in	r24, 0x06	; 6
 98e:	88 68       	ori	r24, 0x88	; 136
 990:	86 b9       	out	0x06, r24	; 6
	ADCSRA |=(1<<ADSC); //conversion
 992:	86 b1       	in	r24, 0x06	; 6
 994:	80 64       	ori	r24, 0x40	; 64
 996:	86 b9       	out	0x06, r24	; 6
	
	TCCR0 |= (1<<WGM00) | (0<<WGM01) | (1<<COM01) | (0<<COM00) | (0<<CS02) | (0<<CS01) | (1<<CS00);
 998:	83 b7       	in	r24, 0x33	; 51
 99a:	81 66       	ori	r24, 0x61	; 97
 99c:	83 bf       	out	0x33, r24	; 51
	TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);
 99e:	85 b5       	in	r24, 0x25	; 37
 9a0:	81 66       	ori	r24, 0x61	; 97
 9a2:	85 bd       	out	0x25, r24	; 37
	
	DDRB |=(1<<PB3);
 9a4:	87 b3       	in	r24, 0x17	; 23
 9a6:	88 60       	ori	r24, 0x08	; 8
 9a8:	87 bb       	out	0x17, r24	; 23
	DDRD |=(1<<PD7);
 9aa:	81 b3       	in	r24, 0x11	; 17
 9ac:	80 68       	ori	r24, 0x80	; 128
 9ae:	81 bb       	out	0x11, r24	; 17
	
	i2c_init();
 9b0:	0e 94 f5 05 	call	0xbea	; 0xbea <i2c_init>
	ssd1306_init();
 9b4:	0e 94 4c 05 	call	0xa98	; 0xa98 <ssd1306_init>
	ssd1306_clear();
 9b8:	80 e0       	ldi	r24, 0x00	; 0
 9ba:	0e 94 ad 05 	call	0xb5a	; 0xb5a <ssd1306_fill>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9be:	8f e1       	ldi	r24, 0x1F	; 31
 9c0:	9e e4       	ldi	r25, 0x4E	; 78
 9c2:	01 97       	sbiw	r24, 0x01	; 1
 9c4:	f1 f7       	brne	.-4      	; 0x9c2 <main+0x44>
 9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <main+0x4a>
 9c8:	00 00       	nop
	float volt1;
	float vdigital1;
	float volt2;
	float vdigital2;
	
	sei();
 9ca:	78 94       	sei
	
	while (1)
	{
		vdigital=sensor1;
 9cc:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <sensor1>
 9d0:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <sensor1+0x1>
 9d4:	07 2e       	mov	r0, r23
 9d6:	00 0c       	add	r0, r0
 9d8:	88 0b       	sbc	r24, r24
 9da:	99 0b       	sbc	r25, r25
 9dc:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__floatsisf>
		volt=(vdigital*5)/1023;
 9e0:	20 e0       	ldi	r18, 0x00	; 0
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	40 ea       	ldi	r20, 0xA0	; 160
 9e6:	50 e4       	ldi	r21, 0x40	; 64
 9e8:	0e 94 6a 07 	call	0xed4	; 0xed4 <__mulsf3>
 9ec:	20 e0       	ldi	r18, 0x00	; 0
 9ee:	30 ec       	ldi	r19, 0xC0	; 192
 9f0:	4f e7       	ldi	r20, 0x7F	; 127
 9f2:	54 e4       	ldi	r21, 0x44	; 68
 9f4:	0e 94 41 06 	call	0xc82	; 0xc82 <__divsf3>
 9f8:	6b 01       	movw	r12, r22
 9fa:	7c 01       	movw	r14, r24
 9fc:	8f e1       	ldi	r24, 0x1F	; 31
 9fe:	9e e4       	ldi	r25, 0x4E	; 78
 a00:	01 97       	sbiw	r24, 0x01	; 1
 a02:	f1 f7       	brne	.-4      	; 0xa00 <main+0x82>
 a04:	00 c0       	rjmp	.+0      	; 0xa06 <main+0x88>
 a06:	00 00       	nop
 a08:	8f e1       	ldi	r24, 0x1F	; 31
 a0a:	9e e4       	ldi	r25, 0x4E	; 78
 a0c:	01 97       	sbiw	r24, 0x01	; 1
 a0e:	f1 f7       	brne	.-4      	; 0xa0c <main+0x8e>
 a10:	00 c0       	rjmp	.+0      	; 0xa12 <main+0x94>
 a12:	00 00       	nop
 a14:	8f e1       	ldi	r24, 0x1F	; 31
 a16:	9e e4       	ldi	r25, 0x4E	; 78
 a18:	01 97       	sbiw	r24, 0x01	; 1
 a1a:	f1 f7       	brne	.-4      	; 0xa18 <main+0x9a>
 a1c:	00 c0       	rjmp	.+0      	; 0xa1e <main+0xa0>
 a1e:	00 00       	nop
		_delay_ms(10);
		vdigital2=sensor3;
		volt2=(vdigital2*5)/1023;
		_delay_ms(10);
		
		if(volt<1)
 a20:	20 e0       	ldi	r18, 0x00	; 0
 a22:	30 e0       	ldi	r19, 0x00	; 0
 a24:	40 e8       	ldi	r20, 0x80	; 128
 a26:	5f e3       	ldi	r21, 0x3F	; 63
 a28:	c7 01       	movw	r24, r14
 a2a:	b6 01       	movw	r22, r12
 a2c:	0e 94 3c 06 	call	0xc78	; 0xc78 <__cmpsf2>
 a30:	88 23       	and	r24, r24
 a32:	5c f4       	brge	.+22     	; 0xa4a <main+0xcc>
		{
			ssd1306_draw_bmp(0,0,128,8, Go);
 a34:	04 e5       	ldi	r16, 0x54	; 84
 a36:	14 e0       	ldi	r17, 0x04	; 4
 a38:	28 e0       	ldi	r18, 0x08	; 8
 a3a:	40 e8       	ldi	r20, 0x80	; 128
 a3c:	60 e0       	ldi	r22, 0x00	; 0
 a3e:	80 e0       	ldi	r24, 0x00	; 0
 a40:	0e 94 b3 05 	call	0xb66	; 0xb66 <ssd1306_draw_bmp>
			OCR0=100;
 a44:	84 e6       	ldi	r24, 0x64	; 100
 a46:	8c bf       	out	0x3c, r24	; 60
			OCR2=100;
 a48:	83 bd       	out	0x23, r24	; 35
		}
		if(volt>4)
 a4a:	20 e0       	ldi	r18, 0x00	; 0
 a4c:	30 e0       	ldi	r19, 0x00	; 0
 a4e:	40 e8       	ldi	r20, 0x80	; 128
 a50:	50 e4       	ldi	r21, 0x40	; 64
 a52:	c7 01       	movw	r24, r14
 a54:	b6 01       	movw	r22, r12
 a56:	0e 94 65 07 	call	0xeca	; 0xeca <__gesf2>
 a5a:	18 16       	cp	r1, r24
 a5c:	0c f0       	brlt	.+2      	; 0xa60 <main+0xe2>
 a5e:	b6 cf       	rjmp	.-148    	; 0x9cc <main+0x4e>
		{
			ssd1306_draw_bmp(0,0,128,8, Stop);
 a60:	04 e5       	ldi	r16, 0x54	; 84
 a62:	10 e0       	ldi	r17, 0x00	; 0
 a64:	28 e0       	ldi	r18, 0x08	; 8
 a66:	40 e8       	ldi	r20, 0x80	; 128
 a68:	60 e0       	ldi	r22, 0x00	; 0
 a6a:	80 e0       	ldi	r24, 0x00	; 0
 a6c:	0e 94 b3 05 	call	0xb66	; 0xb66 <ssd1306_draw_bmp>
			OCR0=0;
 a70:	1c be       	out	0x3c, r1	; 60
			OCR2=0;
 a72:	13 bc       	out	0x23, r1	; 35
 a74:	ab cf       	rjmp	.-170    	; 0x9cc <main+0x4e>

00000a76 <ssd1306_send_command>:
		}
		i2c_stop();
		x += 8;
		j++;
	}
}
 a76:	cf 93       	push	r28
 a78:	c8 2f       	mov	r28, r24
 a7a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <i2c_start>
 a7e:	88 e7       	ldi	r24, 0x78	; 120
 a80:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
 a84:	80 e0       	ldi	r24, 0x00	; 0
 a86:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
 a8a:	8c 2f       	mov	r24, r28
 a8c:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
 a90:	0e 94 09 06 	call	0xc12	; 0xc12 <i2c_stop>
 a94:	cf 91       	pop	r28
 a96:	08 95       	ret

00000a98 <ssd1306_init>:
 a98:	cf 93       	push	r28
 a9a:	c0 e0       	ldi	r28, 0x00	; 0
 a9c:	08 c0       	rjmp	.+16     	; 0xaae <ssd1306_init+0x16>
 a9e:	ec 2f       	mov	r30, r28
 aa0:	f0 e0       	ldi	r31, 0x00	; 0
 aa2:	ec 5a       	subi	r30, 0xAC	; 172
 aa4:	f7 4f       	sbci	r31, 0xF7	; 247
 aa6:	84 91       	lpm	r24, Z
 aa8:	0e 94 3b 05 	call	0xa76	; 0xa76 <ssd1306_send_command>
 aac:	cf 5f       	subi	r28, 0xFF	; 255
 aae:	cc 31       	cpi	r28, 0x1C	; 28
 ab0:	b0 f3       	brcs	.-20     	; 0xa9e <ssd1306_init+0x6>
 ab2:	cf 91       	pop	r28
 ab4:	08 95       	ret

00000ab6 <ssd1306_setpos>:
 ab6:	cf 93       	push	r28
 ab8:	df 93       	push	r29
 aba:	c8 2f       	mov	r28, r24
 abc:	d6 2f       	mov	r29, r22
 abe:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <i2c_start>
 ac2:	88 e7       	ldi	r24, 0x78	; 120
 ac4:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
 ac8:	80 e0       	ldi	r24, 0x00	; 0
 aca:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
 ace:	80 eb       	ldi	r24, 0xB0	; 176
 ad0:	8d 0f       	add	r24, r29
 ad2:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
 ad6:	8c 2f       	mov	r24, r28
 ad8:	82 95       	swap	r24
 ada:	8f 70       	andi	r24, 0x0F	; 15
 adc:	80 61       	ori	r24, 0x10	; 16
 ade:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
 ae2:	8c 2f       	mov	r24, r28
 ae4:	8f 70       	andi	r24, 0x0F	; 15
 ae6:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
 aea:	0e 94 09 06 	call	0xc12	; 0xc12 <i2c_stop>
 aee:	df 91       	pop	r29
 af0:	cf 91       	pop	r28
 af2:	08 95       	ret

00000af4 <ssd1306_fill4>:
 af4:	ef 92       	push	r14
 af6:	ff 92       	push	r15
 af8:	0f 93       	push	r16
 afa:	1f 93       	push	r17
 afc:	cf 93       	push	r28
 afe:	df 93       	push	r29
 b00:	e8 2e       	mov	r14, r24
 b02:	f6 2e       	mov	r15, r22
 b04:	04 2f       	mov	r16, r20
 b06:	12 2f       	mov	r17, r18
 b08:	60 e0       	ldi	r22, 0x00	; 0
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	0e 94 5b 05 	call	0xab6	; 0xab6 <ssd1306_setpos>
 b10:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <i2c_start>
 b14:	88 e7       	ldi	r24, 0x78	; 120
 b16:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
 b1a:	80 e4       	ldi	r24, 0x40	; 64
 b1c:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
 b20:	c0 e0       	ldi	r28, 0x00	; 0
 b22:	d0 e0       	ldi	r29, 0x00	; 0
 b24:	0d c0       	rjmp	.+26     	; 0xb40 <ssd1306_fill4+0x4c>
 b26:	8e 2d       	mov	r24, r14
 b28:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
 b2c:	8f 2d       	mov	r24, r15
 b2e:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
 b32:	80 2f       	mov	r24, r16
 b34:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
 b38:	81 2f       	mov	r24, r17
 b3a:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
 b3e:	21 96       	adiw	r28, 0x01	; 1
 b40:	cf 3f       	cpi	r28, 0xFF	; 255
 b42:	d1 05       	cpc	r29, r1
 b44:	81 f3       	breq	.-32     	; 0xb26 <ssd1306_fill4+0x32>
 b46:	78 f3       	brcs	.-34     	; 0xb26 <ssd1306_fill4+0x32>
 b48:	0e 94 09 06 	call	0xc12	; 0xc12 <i2c_stop>
 b4c:	df 91       	pop	r29
 b4e:	cf 91       	pop	r28
 b50:	1f 91       	pop	r17
 b52:	0f 91       	pop	r16
 b54:	ff 90       	pop	r15
 b56:	ef 90       	pop	r14
 b58:	08 95       	ret

00000b5a <ssd1306_fill>:
 b5a:	28 2f       	mov	r18, r24
 b5c:	48 2f       	mov	r20, r24
 b5e:	68 2f       	mov	r22, r24
 b60:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <ssd1306_fill4>
 b64:	08 95       	ret

00000b66 <ssd1306_draw_bmp>:

// ----------------------------------------------------------------------------

void ssd1306_draw_bmp(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, const uint8_t bitmap[])
{
 b66:	8f 92       	push	r8
 b68:	9f 92       	push	r9
 b6a:	af 92       	push	r10
 b6c:	bf 92       	push	r11
 b6e:	cf 92       	push	r12
 b70:	df 92       	push	r13
 b72:	ef 92       	push	r14
 b74:	ff 92       	push	r15
 b76:	0f 93       	push	r16
 b78:	1f 93       	push	r17
 b7a:	cf 93       	push	r28
 b7c:	df 93       	push	r29
 b7e:	98 2e       	mov	r9, r24
 b80:	c6 2e       	mov	r12, r22
 b82:	d4 2e       	mov	r13, r20
 b84:	82 2e       	mov	r8, r18
 b86:	58 01       	movw	r10, r16
	uint16_t j = 0;
 b88:	c0 e0       	ldi	r28, 0x00	; 0
 b8a:	d0 e0       	ldi	r29, 0x00	; 0
 b8c:	1f c0       	rjmp	.+62     	; 0xbcc <ssd1306_draw_bmp+0x66>
	uint8_t y;
	if (y1 % 8 == 0) y = y1 / 8;
	else y = y1 / 8 + 1;
	for (y = y0; y < y1; y++)
	{
		ssd1306_setpos(x0,y);
 b8e:	6c 2d       	mov	r22, r12
 b90:	89 2d       	mov	r24, r9
 b92:	0e 94 5b 05 	call	0xab6	; 0xab6 <ssd1306_setpos>
		i2c_start();
 b96:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <i2c_start>
	i2c_writebyte(SSD1306_SA);
 b9a:	88 e7       	ldi	r24, 0x78	; 120
 b9c:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
	i2c_writebyte(0x40);	//write data
 ba0:	80 e4       	ldi	r24, 0x40	; 64
 ba2:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
		for (uint8_t x = x0; x < x1; x++)
 ba6:	19 2d       	mov	r17, r9
 ba8:	0c c0       	rjmp	.+24     	; 0xbc2 <ssd1306_draw_bmp+0x5c>
		{
			i2c_writebyte(pgm_read_byte(&bitmap[j++]));
 baa:	7e 01       	movw	r14, r28
 bac:	8f ef       	ldi	r24, 0xFF	; 255
 bae:	e8 1a       	sub	r14, r24
 bb0:	f8 0a       	sbc	r15, r24
 bb2:	f5 01       	movw	r30, r10
 bb4:	ec 0f       	add	r30, r28
 bb6:	fd 1f       	adc	r31, r29
 bb8:	84 91       	lpm	r24, Z
 bba:	0e 94 16 06 	call	0xc2c	; 0xc2c <i2c_writebyte>
	{
		ssd1306_setpos(x0,y);
		i2c_start();
	i2c_writebyte(SSD1306_SA);
	i2c_writebyte(0x40);	//write data
		for (uint8_t x = x0; x < x1; x++)
 bbe:	1f 5f       	subi	r17, 0xFF	; 255
		{
			i2c_writebyte(pgm_read_byte(&bitmap[j++]));
 bc0:	e7 01       	movw	r28, r14
	{
		ssd1306_setpos(x0,y);
		i2c_start();
	i2c_writebyte(SSD1306_SA);
	i2c_writebyte(0x40);	//write data
		for (uint8_t x = x0; x < x1; x++)
 bc2:	1d 15       	cp	r17, r13
 bc4:	90 f3       	brcs	.-28     	; 0xbaa <ssd1306_draw_bmp+0x44>
		{
			i2c_writebyte(pgm_read_byte(&bitmap[j++]));
		}
		i2c_stop();
 bc6:	0e 94 09 06 	call	0xc12	; 0xc12 <i2c_stop>
{
	uint16_t j = 0;
	uint8_t y;
	if (y1 % 8 == 0) y = y1 / 8;
	else y = y1 / 8 + 1;
	for (y = y0; y < y1; y++)
 bca:	c3 94       	inc	r12
 bcc:	c8 14       	cp	r12, r8
 bce:	f8 f2       	brcs	.-66     	; 0xb8e <ssd1306_draw_bmp+0x28>
		{
			i2c_writebyte(pgm_read_byte(&bitmap[j++]));
		}
		i2c_stop();
	}
}
 bd0:	df 91       	pop	r29
 bd2:	cf 91       	pop	r28
 bd4:	1f 91       	pop	r17
 bd6:	0f 91       	pop	r16
 bd8:	ff 90       	pop	r15
 bda:	ef 90       	pop	r14
 bdc:	df 90       	pop	r13
 bde:	cf 90       	pop	r12
 be0:	bf 90       	pop	r11
 be2:	af 90       	pop	r10
 be4:	9f 90       	pop	r9
 be6:	8f 90       	pop	r8
 be8:	08 95       	ret

00000bea <i2c_init>:
#define SDA_high()             SDA_PORT  |=  _BV(SDA_BIT)   


void i2c_init()
{
	SDA_DIR |= (1 << SDA_BIT);	// Set port as output
 bea:	84 b3       	in	r24, 0x14	; 20
 bec:	82 60       	ori	r24, 0x02	; 2
 bee:	84 bb       	out	0x14, r24	; 20
	SCL_DIR |= (1 << SCL_BIT);	// Set port as output
 bf0:	84 b3       	in	r24, 0x14	; 20
 bf2:	81 60       	ori	r24, 0x01	; 1
 bf4:	84 bb       	out	0x14, r24	; 20
 bf6:	08 95       	ret

00000bf8 <i2c_start>:
}

void i2c_start(void)
{

    SCL_high();
 bf8:	85 b3       	in	r24, 0x15	; 21
 bfa:	81 60       	ori	r24, 0x01	; 1
 bfc:	85 bb       	out	0x15, r24	; 21
    SDA_high();
 bfe:	85 b3       	in	r24, 0x15	; 21
 c00:	82 60       	ori	r24, 0x02	; 2
 c02:	85 bb       	out	0x15, r24	; 21
    SDA_low();
 c04:	85 b3       	in	r24, 0x15	; 21
 c06:	8d 7f       	andi	r24, 0xFD	; 253
 c08:	85 bb       	out	0x15, r24	; 21
    SCL_low();
 c0a:	85 b3       	in	r24, 0x15	; 21
 c0c:	8e 7f       	andi	r24, 0xFE	; 254
 c0e:	85 bb       	out	0x15, r24	; 21
 c10:	08 95       	ret

00000c12 <i2c_stop>:
}

void i2c_stop(void)
{

    SCL_low();
 c12:	85 b3       	in	r24, 0x15	; 21
 c14:	8e 7f       	andi	r24, 0xFE	; 254
 c16:	85 bb       	out	0x15, r24	; 21
    SDA_low();
 c18:	85 b3       	in	r24, 0x15	; 21
 c1a:	8d 7f       	andi	r24, 0xFD	; 253
 c1c:	85 bb       	out	0x15, r24	; 21
    SCL_high();
 c1e:	85 b3       	in	r24, 0x15	; 21
 c20:	81 60       	ori	r24, 0x01	; 1
 c22:	85 bb       	out	0x15, r24	; 21
    SDA_high();
 c24:	85 b3       	in	r24, 0x15	; 21
 c26:	82 60       	ori	r24, 0x02	; 2
 c28:	85 bb       	out	0x15, r24	; 21
 c2a:	08 95       	ret

00000c2c <i2c_writebyte>:
}

void i2c_writebyte(uint8_t byte)
{
	uint8_t i;
	for (i = 0; i < 8; i++)
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	18 c0       	rjmp	.+48     	; 0xc60 <i2c_writebyte+0x34>
	{
		if ((byte << i) & 0x80)
 c30:	28 2f       	mov	r18, r24
 c32:	30 e0       	ldi	r19, 0x00	; 0
 c34:	09 2e       	mov	r0, r25
 c36:	02 c0       	rjmp	.+4      	; 0xc3c <i2c_writebyte+0x10>
 c38:	22 0f       	add	r18, r18
 c3a:	33 1f       	adc	r19, r19
 c3c:	0a 94       	dec	r0
 c3e:	e2 f7       	brpl	.-8      	; 0xc38 <i2c_writebyte+0xc>
 c40:	27 ff       	sbrs	r18, 7
 c42:	04 c0       	rjmp	.+8      	; 0xc4c <i2c_writebyte+0x20>
        {
		
            SDA_high();
 c44:	25 b3       	in	r18, 0x15	; 21
 c46:	22 60       	ori	r18, 0x02	; 2
 c48:	25 bb       	out	0x15, r18	; 21
 c4a:	03 c0       	rjmp	.+6      	; 0xc52 <i2c_writebyte+0x26>
            }
		else
        {
		
            SDA_low();
 c4c:	25 b3       	in	r18, 0x15	; 21
 c4e:	2d 7f       	andi	r18, 0xFD	; 253
 c50:	25 bb       	out	0x15, r18	; 21
            }
		
	
        SCL_high();
 c52:	25 b3       	in	r18, 0x15	; 21
 c54:	21 60       	ori	r18, 0x01	; 1
 c56:	25 bb       	out	0x15, r18	; 21
        SCL_low();
 c58:	25 b3       	in	r18, 0x15	; 21
 c5a:	2e 7f       	andi	r18, 0xFE	; 254
 c5c:	25 bb       	out	0x15, r18	; 21
}

void i2c_writebyte(uint8_t byte)
{
	uint8_t i;
	for (i = 0; i < 8; i++)
 c5e:	9f 5f       	subi	r25, 0xFF	; 255
 c60:	98 30       	cpi	r25, 0x08	; 8
 c62:	30 f3       	brcs	.-52     	; 0xc30 <i2c_writebyte+0x4>
	
        SCL_high();
        SCL_low();
	}

    SDA_high();
 c64:	85 b3       	in	r24, 0x15	; 21
 c66:	82 60       	ori	r24, 0x02	; 2
 c68:	85 bb       	out	0x15, r24	; 21
    SCL_high();
 c6a:	85 b3       	in	r24, 0x15	; 21
 c6c:	81 60       	ori	r24, 0x01	; 1
 c6e:	85 bb       	out	0x15, r24	; 21
    SCL_low();
 c70:	85 b3       	in	r24, 0x15	; 21
 c72:	8e 7f       	andi	r24, 0xFE	; 254
 c74:	85 bb       	out	0x15, r24	; 21
 c76:	08 95       	ret

00000c78 <__cmpsf2>:
 c78:	0e 94 f0 06 	call	0xde0	; 0xde0 <__fp_cmp>
 c7c:	08 f4       	brcc	.+2      	; 0xc80 <__cmpsf2+0x8>
 c7e:	81 e0       	ldi	r24, 0x01	; 1
 c80:	08 95       	ret

00000c82 <__divsf3>:
 c82:	0e 94 55 06 	call	0xcaa	; 0xcaa <__divsf3x>
 c86:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_round>
 c8a:	0e 94 24 07 	call	0xe48	; 0xe48 <__fp_pscB>
 c8e:	58 f0       	brcs	.+22     	; 0xca6 <__divsf3+0x24>
 c90:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fp_pscA>
 c94:	40 f0       	brcs	.+16     	; 0xca6 <__divsf3+0x24>
 c96:	29 f4       	brne	.+10     	; 0xca2 <__divsf3+0x20>
 c98:	5f 3f       	cpi	r21, 0xFF	; 255
 c9a:	29 f0       	breq	.+10     	; 0xca6 <__divsf3+0x24>
 c9c:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_inf>
 ca0:	51 11       	cpse	r21, r1
 ca2:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__fp_szero>
 ca6:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__fp_nan>

00000caa <__divsf3x>:
 caa:	0e 94 3c 07 	call	0xe78	; 0xe78 <__fp_split3>
 cae:	68 f3       	brcs	.-38     	; 0xc8a <__divsf3+0x8>

00000cb0 <__divsf3_pse>:
 cb0:	99 23       	and	r25, r25
 cb2:	b1 f3       	breq	.-20     	; 0xca0 <__divsf3+0x1e>
 cb4:	55 23       	and	r21, r21
 cb6:	91 f3       	breq	.-28     	; 0xc9c <__divsf3+0x1a>
 cb8:	95 1b       	sub	r25, r21
 cba:	55 0b       	sbc	r21, r21
 cbc:	bb 27       	eor	r27, r27
 cbe:	aa 27       	eor	r26, r26
 cc0:	62 17       	cp	r22, r18
 cc2:	73 07       	cpc	r23, r19
 cc4:	84 07       	cpc	r24, r20
 cc6:	38 f0       	brcs	.+14     	; 0xcd6 <__divsf3_pse+0x26>
 cc8:	9f 5f       	subi	r25, 0xFF	; 255
 cca:	5f 4f       	sbci	r21, 0xFF	; 255
 ccc:	22 0f       	add	r18, r18
 cce:	33 1f       	adc	r19, r19
 cd0:	44 1f       	adc	r20, r20
 cd2:	aa 1f       	adc	r26, r26
 cd4:	a9 f3       	breq	.-22     	; 0xcc0 <__divsf3_pse+0x10>
 cd6:	35 d0       	rcall	.+106    	; 0xd42 <__divsf3_pse+0x92>
 cd8:	0e 2e       	mov	r0, r30
 cda:	3a f0       	brmi	.+14     	; 0xcea <__divsf3_pse+0x3a>
 cdc:	e0 e8       	ldi	r30, 0x80	; 128
 cde:	32 d0       	rcall	.+100    	; 0xd44 <__divsf3_pse+0x94>
 ce0:	91 50       	subi	r25, 0x01	; 1
 ce2:	50 40       	sbci	r21, 0x00	; 0
 ce4:	e6 95       	lsr	r30
 ce6:	00 1c       	adc	r0, r0
 ce8:	ca f7       	brpl	.-14     	; 0xcdc <__divsf3_pse+0x2c>
 cea:	2b d0       	rcall	.+86     	; 0xd42 <__divsf3_pse+0x92>
 cec:	fe 2f       	mov	r31, r30
 cee:	29 d0       	rcall	.+82     	; 0xd42 <__divsf3_pse+0x92>
 cf0:	66 0f       	add	r22, r22
 cf2:	77 1f       	adc	r23, r23
 cf4:	88 1f       	adc	r24, r24
 cf6:	bb 1f       	adc	r27, r27
 cf8:	26 17       	cp	r18, r22
 cfa:	37 07       	cpc	r19, r23
 cfc:	48 07       	cpc	r20, r24
 cfe:	ab 07       	cpc	r26, r27
 d00:	b0 e8       	ldi	r27, 0x80	; 128
 d02:	09 f0       	breq	.+2      	; 0xd06 <__divsf3_pse+0x56>
 d04:	bb 0b       	sbc	r27, r27
 d06:	80 2d       	mov	r24, r0
 d08:	bf 01       	movw	r22, r30
 d0a:	ff 27       	eor	r31, r31
 d0c:	93 58       	subi	r25, 0x83	; 131
 d0e:	5f 4f       	sbci	r21, 0xFF	; 255
 d10:	3a f0       	brmi	.+14     	; 0xd20 <__divsf3_pse+0x70>
 d12:	9e 3f       	cpi	r25, 0xFE	; 254
 d14:	51 05       	cpc	r21, r1
 d16:	78 f0       	brcs	.+30     	; 0xd36 <__divsf3_pse+0x86>
 d18:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_inf>
 d1c:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__fp_szero>
 d20:	5f 3f       	cpi	r21, 0xFF	; 255
 d22:	e4 f3       	brlt	.-8      	; 0xd1c <__divsf3_pse+0x6c>
 d24:	98 3e       	cpi	r25, 0xE8	; 232
 d26:	d4 f3       	brlt	.-12     	; 0xd1c <__divsf3_pse+0x6c>
 d28:	86 95       	lsr	r24
 d2a:	77 95       	ror	r23
 d2c:	67 95       	ror	r22
 d2e:	b7 95       	ror	r27
 d30:	f7 95       	ror	r31
 d32:	9f 5f       	subi	r25, 0xFF	; 255
 d34:	c9 f7       	brne	.-14     	; 0xd28 <__divsf3_pse+0x78>
 d36:	88 0f       	add	r24, r24
 d38:	91 1d       	adc	r25, r1
 d3a:	96 95       	lsr	r25
 d3c:	87 95       	ror	r24
 d3e:	97 f9       	bld	r25, 7
 d40:	08 95       	ret
 d42:	e1 e0       	ldi	r30, 0x01	; 1
 d44:	66 0f       	add	r22, r22
 d46:	77 1f       	adc	r23, r23
 d48:	88 1f       	adc	r24, r24
 d4a:	bb 1f       	adc	r27, r27
 d4c:	62 17       	cp	r22, r18
 d4e:	73 07       	cpc	r23, r19
 d50:	84 07       	cpc	r24, r20
 d52:	ba 07       	cpc	r27, r26
 d54:	20 f0       	brcs	.+8      	; 0xd5e <__divsf3_pse+0xae>
 d56:	62 1b       	sub	r22, r18
 d58:	73 0b       	sbc	r23, r19
 d5a:	84 0b       	sbc	r24, r20
 d5c:	ba 0b       	sbc	r27, r26
 d5e:	ee 1f       	adc	r30, r30
 d60:	88 f7       	brcc	.-30     	; 0xd44 <__divsf3_pse+0x94>
 d62:	e0 95       	com	r30
 d64:	08 95       	ret

00000d66 <__floatunsisf>:
 d66:	e8 94       	clt
 d68:	09 c0       	rjmp	.+18     	; 0xd7c <__floatsisf+0x12>

00000d6a <__floatsisf>:
 d6a:	97 fb       	bst	r25, 7
 d6c:	3e f4       	brtc	.+14     	; 0xd7c <__floatsisf+0x12>
 d6e:	90 95       	com	r25
 d70:	80 95       	com	r24
 d72:	70 95       	com	r23
 d74:	61 95       	neg	r22
 d76:	7f 4f       	sbci	r23, 0xFF	; 255
 d78:	8f 4f       	sbci	r24, 0xFF	; 255
 d7a:	9f 4f       	sbci	r25, 0xFF	; 255
 d7c:	99 23       	and	r25, r25
 d7e:	a9 f0       	breq	.+42     	; 0xdaa <__floatsisf+0x40>
 d80:	f9 2f       	mov	r31, r25
 d82:	96 e9       	ldi	r25, 0x96	; 150
 d84:	bb 27       	eor	r27, r27
 d86:	93 95       	inc	r25
 d88:	f6 95       	lsr	r31
 d8a:	87 95       	ror	r24
 d8c:	77 95       	ror	r23
 d8e:	67 95       	ror	r22
 d90:	b7 95       	ror	r27
 d92:	f1 11       	cpse	r31, r1
 d94:	f8 cf       	rjmp	.-16     	; 0xd86 <__floatsisf+0x1c>
 d96:	fa f4       	brpl	.+62     	; 0xdd6 <__floatsisf+0x6c>
 d98:	bb 0f       	add	r27, r27
 d9a:	11 f4       	brne	.+4      	; 0xda0 <__floatsisf+0x36>
 d9c:	60 ff       	sbrs	r22, 0
 d9e:	1b c0       	rjmp	.+54     	; 0xdd6 <__floatsisf+0x6c>
 da0:	6f 5f       	subi	r22, 0xFF	; 255
 da2:	7f 4f       	sbci	r23, 0xFF	; 255
 da4:	8f 4f       	sbci	r24, 0xFF	; 255
 da6:	9f 4f       	sbci	r25, 0xFF	; 255
 da8:	16 c0       	rjmp	.+44     	; 0xdd6 <__floatsisf+0x6c>
 daa:	88 23       	and	r24, r24
 dac:	11 f0       	breq	.+4      	; 0xdb2 <__floatsisf+0x48>
 dae:	96 e9       	ldi	r25, 0x96	; 150
 db0:	11 c0       	rjmp	.+34     	; 0xdd4 <__floatsisf+0x6a>
 db2:	77 23       	and	r23, r23
 db4:	21 f0       	breq	.+8      	; 0xdbe <__floatsisf+0x54>
 db6:	9e e8       	ldi	r25, 0x8E	; 142
 db8:	87 2f       	mov	r24, r23
 dba:	76 2f       	mov	r23, r22
 dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <__floatsisf+0x5e>
 dbe:	66 23       	and	r22, r22
 dc0:	71 f0       	breq	.+28     	; 0xdde <__floatsisf+0x74>
 dc2:	96 e8       	ldi	r25, 0x86	; 134
 dc4:	86 2f       	mov	r24, r22
 dc6:	70 e0       	ldi	r23, 0x00	; 0
 dc8:	60 e0       	ldi	r22, 0x00	; 0
 dca:	2a f0       	brmi	.+10     	; 0xdd6 <__floatsisf+0x6c>
 dcc:	9a 95       	dec	r25
 dce:	66 0f       	add	r22, r22
 dd0:	77 1f       	adc	r23, r23
 dd2:	88 1f       	adc	r24, r24
 dd4:	da f7       	brpl	.-10     	; 0xdcc <__floatsisf+0x62>
 dd6:	88 0f       	add	r24, r24
 dd8:	96 95       	lsr	r25
 dda:	87 95       	ror	r24
 ddc:	97 f9       	bld	r25, 7
 dde:	08 95       	ret

00000de0 <__fp_cmp>:
 de0:	99 0f       	add	r25, r25
 de2:	00 08       	sbc	r0, r0
 de4:	55 0f       	add	r21, r21
 de6:	aa 0b       	sbc	r26, r26
 de8:	e0 e8       	ldi	r30, 0x80	; 128
 dea:	fe ef       	ldi	r31, 0xFE	; 254
 dec:	16 16       	cp	r1, r22
 dee:	17 06       	cpc	r1, r23
 df0:	e8 07       	cpc	r30, r24
 df2:	f9 07       	cpc	r31, r25
 df4:	c0 f0       	brcs	.+48     	; 0xe26 <__fp_cmp+0x46>
 df6:	12 16       	cp	r1, r18
 df8:	13 06       	cpc	r1, r19
 dfa:	e4 07       	cpc	r30, r20
 dfc:	f5 07       	cpc	r31, r21
 dfe:	98 f0       	brcs	.+38     	; 0xe26 <__fp_cmp+0x46>
 e00:	62 1b       	sub	r22, r18
 e02:	73 0b       	sbc	r23, r19
 e04:	84 0b       	sbc	r24, r20
 e06:	95 0b       	sbc	r25, r21
 e08:	39 f4       	brne	.+14     	; 0xe18 <__fp_cmp+0x38>
 e0a:	0a 26       	eor	r0, r26
 e0c:	61 f0       	breq	.+24     	; 0xe26 <__fp_cmp+0x46>
 e0e:	23 2b       	or	r18, r19
 e10:	24 2b       	or	r18, r20
 e12:	25 2b       	or	r18, r21
 e14:	21 f4       	brne	.+8      	; 0xe1e <__fp_cmp+0x3e>
 e16:	08 95       	ret
 e18:	0a 26       	eor	r0, r26
 e1a:	09 f4       	brne	.+2      	; 0xe1e <__fp_cmp+0x3e>
 e1c:	a1 40       	sbci	r26, 0x01	; 1
 e1e:	a6 95       	lsr	r26
 e20:	8f ef       	ldi	r24, 0xFF	; 255
 e22:	81 1d       	adc	r24, r1
 e24:	81 1d       	adc	r24, r1
 e26:	08 95       	ret

00000e28 <__fp_inf>:
 e28:	97 f9       	bld	r25, 7
 e2a:	9f 67       	ori	r25, 0x7F	; 127
 e2c:	80 e8       	ldi	r24, 0x80	; 128
 e2e:	70 e0       	ldi	r23, 0x00	; 0
 e30:	60 e0       	ldi	r22, 0x00	; 0
 e32:	08 95       	ret

00000e34 <__fp_nan>:
 e34:	9f ef       	ldi	r25, 0xFF	; 255
 e36:	80 ec       	ldi	r24, 0xC0	; 192
 e38:	08 95       	ret

00000e3a <__fp_pscA>:
 e3a:	00 24       	eor	r0, r0
 e3c:	0a 94       	dec	r0
 e3e:	16 16       	cp	r1, r22
 e40:	17 06       	cpc	r1, r23
 e42:	18 06       	cpc	r1, r24
 e44:	09 06       	cpc	r0, r25
 e46:	08 95       	ret

00000e48 <__fp_pscB>:
 e48:	00 24       	eor	r0, r0
 e4a:	0a 94       	dec	r0
 e4c:	12 16       	cp	r1, r18
 e4e:	13 06       	cpc	r1, r19
 e50:	14 06       	cpc	r1, r20
 e52:	05 06       	cpc	r0, r21
 e54:	08 95       	ret

00000e56 <__fp_round>:
 e56:	09 2e       	mov	r0, r25
 e58:	03 94       	inc	r0
 e5a:	00 0c       	add	r0, r0
 e5c:	11 f4       	brne	.+4      	; 0xe62 <__fp_round+0xc>
 e5e:	88 23       	and	r24, r24
 e60:	52 f0       	brmi	.+20     	; 0xe76 <__fp_round+0x20>
 e62:	bb 0f       	add	r27, r27
 e64:	40 f4       	brcc	.+16     	; 0xe76 <__fp_round+0x20>
 e66:	bf 2b       	or	r27, r31
 e68:	11 f4       	brne	.+4      	; 0xe6e <__fp_round+0x18>
 e6a:	60 ff       	sbrs	r22, 0
 e6c:	04 c0       	rjmp	.+8      	; 0xe76 <__fp_round+0x20>
 e6e:	6f 5f       	subi	r22, 0xFF	; 255
 e70:	7f 4f       	sbci	r23, 0xFF	; 255
 e72:	8f 4f       	sbci	r24, 0xFF	; 255
 e74:	9f 4f       	sbci	r25, 0xFF	; 255
 e76:	08 95       	ret

00000e78 <__fp_split3>:
 e78:	57 fd       	sbrc	r21, 7
 e7a:	90 58       	subi	r25, 0x80	; 128
 e7c:	44 0f       	add	r20, r20
 e7e:	55 1f       	adc	r21, r21
 e80:	59 f0       	breq	.+22     	; 0xe98 <__fp_splitA+0x10>
 e82:	5f 3f       	cpi	r21, 0xFF	; 255
 e84:	71 f0       	breq	.+28     	; 0xea2 <__fp_splitA+0x1a>
 e86:	47 95       	ror	r20

00000e88 <__fp_splitA>:
 e88:	88 0f       	add	r24, r24
 e8a:	97 fb       	bst	r25, 7
 e8c:	99 1f       	adc	r25, r25
 e8e:	61 f0       	breq	.+24     	; 0xea8 <__fp_splitA+0x20>
 e90:	9f 3f       	cpi	r25, 0xFF	; 255
 e92:	79 f0       	breq	.+30     	; 0xeb2 <__fp_splitA+0x2a>
 e94:	87 95       	ror	r24
 e96:	08 95       	ret
 e98:	12 16       	cp	r1, r18
 e9a:	13 06       	cpc	r1, r19
 e9c:	14 06       	cpc	r1, r20
 e9e:	55 1f       	adc	r21, r21
 ea0:	f2 cf       	rjmp	.-28     	; 0xe86 <__fp_split3+0xe>
 ea2:	46 95       	lsr	r20
 ea4:	f1 df       	rcall	.-30     	; 0xe88 <__fp_splitA>
 ea6:	08 c0       	rjmp	.+16     	; 0xeb8 <__fp_splitA+0x30>
 ea8:	16 16       	cp	r1, r22
 eaa:	17 06       	cpc	r1, r23
 eac:	18 06       	cpc	r1, r24
 eae:	99 1f       	adc	r25, r25
 eb0:	f1 cf       	rjmp	.-30     	; 0xe94 <__fp_splitA+0xc>
 eb2:	86 95       	lsr	r24
 eb4:	71 05       	cpc	r23, r1
 eb6:	61 05       	cpc	r22, r1
 eb8:	08 94       	sec
 eba:	08 95       	ret

00000ebc <__fp_zero>:
 ebc:	e8 94       	clt

00000ebe <__fp_szero>:
 ebe:	bb 27       	eor	r27, r27
 ec0:	66 27       	eor	r22, r22
 ec2:	77 27       	eor	r23, r23
 ec4:	cb 01       	movw	r24, r22
 ec6:	97 f9       	bld	r25, 7
 ec8:	08 95       	ret

00000eca <__gesf2>:
 eca:	0e 94 f0 06 	call	0xde0	; 0xde0 <__fp_cmp>
 ece:	08 f4       	brcc	.+2      	; 0xed2 <__gesf2+0x8>
 ed0:	8f ef       	ldi	r24, 0xFF	; 255
 ed2:	08 95       	ret

00000ed4 <__mulsf3>:
 ed4:	0e 94 7d 07 	call	0xefa	; 0xefa <__mulsf3x>
 ed8:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_round>
 edc:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fp_pscA>
 ee0:	38 f0       	brcs	.+14     	; 0xef0 <__mulsf3+0x1c>
 ee2:	0e 94 24 07 	call	0xe48	; 0xe48 <__fp_pscB>
 ee6:	20 f0       	brcs	.+8      	; 0xef0 <__mulsf3+0x1c>
 ee8:	95 23       	and	r25, r21
 eea:	11 f0       	breq	.+4      	; 0xef0 <__mulsf3+0x1c>
 eec:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_inf>
 ef0:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__fp_nan>
 ef4:	11 24       	eor	r1, r1
 ef6:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__fp_szero>

00000efa <__mulsf3x>:
 efa:	0e 94 3c 07 	call	0xe78	; 0xe78 <__fp_split3>
 efe:	70 f3       	brcs	.-36     	; 0xedc <__mulsf3+0x8>

00000f00 <__mulsf3_pse>:
 f00:	95 9f       	mul	r25, r21
 f02:	c1 f3       	breq	.-16     	; 0xef4 <__mulsf3+0x20>
 f04:	95 0f       	add	r25, r21
 f06:	50 e0       	ldi	r21, 0x00	; 0
 f08:	55 1f       	adc	r21, r21
 f0a:	62 9f       	mul	r22, r18
 f0c:	f0 01       	movw	r30, r0
 f0e:	72 9f       	mul	r23, r18
 f10:	bb 27       	eor	r27, r27
 f12:	f0 0d       	add	r31, r0
 f14:	b1 1d       	adc	r27, r1
 f16:	63 9f       	mul	r22, r19
 f18:	aa 27       	eor	r26, r26
 f1a:	f0 0d       	add	r31, r0
 f1c:	b1 1d       	adc	r27, r1
 f1e:	aa 1f       	adc	r26, r26
 f20:	64 9f       	mul	r22, r20
 f22:	66 27       	eor	r22, r22
 f24:	b0 0d       	add	r27, r0
 f26:	a1 1d       	adc	r26, r1
 f28:	66 1f       	adc	r22, r22
 f2a:	82 9f       	mul	r24, r18
 f2c:	22 27       	eor	r18, r18
 f2e:	b0 0d       	add	r27, r0
 f30:	a1 1d       	adc	r26, r1
 f32:	62 1f       	adc	r22, r18
 f34:	73 9f       	mul	r23, r19
 f36:	b0 0d       	add	r27, r0
 f38:	a1 1d       	adc	r26, r1
 f3a:	62 1f       	adc	r22, r18
 f3c:	83 9f       	mul	r24, r19
 f3e:	a0 0d       	add	r26, r0
 f40:	61 1d       	adc	r22, r1
 f42:	22 1f       	adc	r18, r18
 f44:	74 9f       	mul	r23, r20
 f46:	33 27       	eor	r19, r19
 f48:	a0 0d       	add	r26, r0
 f4a:	61 1d       	adc	r22, r1
 f4c:	23 1f       	adc	r18, r19
 f4e:	84 9f       	mul	r24, r20
 f50:	60 0d       	add	r22, r0
 f52:	21 1d       	adc	r18, r1
 f54:	82 2f       	mov	r24, r18
 f56:	76 2f       	mov	r23, r22
 f58:	6a 2f       	mov	r22, r26
 f5a:	11 24       	eor	r1, r1
 f5c:	9f 57       	subi	r25, 0x7F	; 127
 f5e:	50 40       	sbci	r21, 0x00	; 0
 f60:	9a f0       	brmi	.+38     	; 0xf88 <__mulsf3_pse+0x88>
 f62:	f1 f0       	breq	.+60     	; 0xfa0 <__mulsf3_pse+0xa0>
 f64:	88 23       	and	r24, r24
 f66:	4a f0       	brmi	.+18     	; 0xf7a <__mulsf3_pse+0x7a>
 f68:	ee 0f       	add	r30, r30
 f6a:	ff 1f       	adc	r31, r31
 f6c:	bb 1f       	adc	r27, r27
 f6e:	66 1f       	adc	r22, r22
 f70:	77 1f       	adc	r23, r23
 f72:	88 1f       	adc	r24, r24
 f74:	91 50       	subi	r25, 0x01	; 1
 f76:	50 40       	sbci	r21, 0x00	; 0
 f78:	a9 f7       	brne	.-22     	; 0xf64 <__mulsf3_pse+0x64>
 f7a:	9e 3f       	cpi	r25, 0xFE	; 254
 f7c:	51 05       	cpc	r21, r1
 f7e:	80 f0       	brcs	.+32     	; 0xfa0 <__mulsf3_pse+0xa0>
 f80:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_inf>
 f84:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__fp_szero>
 f88:	5f 3f       	cpi	r21, 0xFF	; 255
 f8a:	e4 f3       	brlt	.-8      	; 0xf84 <__mulsf3_pse+0x84>
 f8c:	98 3e       	cpi	r25, 0xE8	; 232
 f8e:	d4 f3       	brlt	.-12     	; 0xf84 <__mulsf3_pse+0x84>
 f90:	86 95       	lsr	r24
 f92:	77 95       	ror	r23
 f94:	67 95       	ror	r22
 f96:	b7 95       	ror	r27
 f98:	f7 95       	ror	r31
 f9a:	e7 95       	ror	r30
 f9c:	9f 5f       	subi	r25, 0xFF	; 255
 f9e:	c1 f7       	brne	.-16     	; 0xf90 <__mulsf3_pse+0x90>
 fa0:	fe 2b       	or	r31, r30
 fa2:	88 0f       	add	r24, r24
 fa4:	91 1d       	adc	r25, r1
 fa6:	96 95       	lsr	r25
 fa8:	87 95       	ror	r24
 faa:	97 f9       	bld	r25, 7
 fac:	08 95       	ret

00000fae <__udivmodsi4>:
 fae:	a1 e2       	ldi	r26, 0x21	; 33
 fb0:	1a 2e       	mov	r1, r26
 fb2:	aa 1b       	sub	r26, r26
 fb4:	bb 1b       	sub	r27, r27
 fb6:	fd 01       	movw	r30, r26
 fb8:	0d c0       	rjmp	.+26     	; 0xfd4 <__udivmodsi4_ep>

00000fba <__udivmodsi4_loop>:
 fba:	aa 1f       	adc	r26, r26
 fbc:	bb 1f       	adc	r27, r27
 fbe:	ee 1f       	adc	r30, r30
 fc0:	ff 1f       	adc	r31, r31
 fc2:	a2 17       	cp	r26, r18
 fc4:	b3 07       	cpc	r27, r19
 fc6:	e4 07       	cpc	r30, r20
 fc8:	f5 07       	cpc	r31, r21
 fca:	20 f0       	brcs	.+8      	; 0xfd4 <__udivmodsi4_ep>
 fcc:	a2 1b       	sub	r26, r18
 fce:	b3 0b       	sbc	r27, r19
 fd0:	e4 0b       	sbc	r30, r20
 fd2:	f5 0b       	sbc	r31, r21

00000fd4 <__udivmodsi4_ep>:
 fd4:	66 1f       	adc	r22, r22
 fd6:	77 1f       	adc	r23, r23
 fd8:	88 1f       	adc	r24, r24
 fda:	99 1f       	adc	r25, r25
 fdc:	1a 94       	dec	r1
 fde:	69 f7       	brne	.-38     	; 0xfba <__udivmodsi4_loop>
 fe0:	60 95       	com	r22
 fe2:	70 95       	com	r23
 fe4:	80 95       	com	r24
 fe6:	90 95       	com	r25
 fe8:	9b 01       	movw	r18, r22
 fea:	ac 01       	movw	r20, r24
 fec:	bd 01       	movw	r22, r26
 fee:	cf 01       	movw	r24, r30
 ff0:	08 95       	ret

00000ff2 <_exit>:
 ff2:	f8 94       	cli

00000ff4 <__stop_program>:
 ff4:	ff cf       	rjmp	.-2      	; 0xff4 <__stop_program>
